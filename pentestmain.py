from VirtualNetwork import *

import time
#A timer goes for 6 minutes 40 seconds. At the end of those 3 minutes it resets two password
class GameTimer:
    def __init__(self, n):
        self.time_limit = 400
        self.start = int(time.time())
        self.end = self.start + self.time_limit
        self.network = n
        self.difficulty = 2
        self.on_index = 0
    def get_num_to_reset(self):
        return self.difficulty
    def check_time(self):
        print ("You have " + str((int(time.time()) - self.end) * -1) + " seconds left", end="")
        print (" before " + str(self.get_num_to_reset()) + " targets are reset.")
        if int(time.time()) >= self.end:
            self.network.reset(self.get_num_to_reset(), self.on_index)
            self.start = int(time.time())
            self.end = self.start + self.time_limit
            #reset on_index as well
            self.on_index -= 2
            if self.on_index < 0:
                self.on_index = 0
            return True
        return False
        

version_descrip = "This version of the Pen Tester will have only two kinds of ciphers: Caesar and Hex."
version_descrip+=" Each Hex cipher will have only one shift value. All of the letters will be shifted by that value. When you identify that value, you must"
version_descrip+=" enter the guess as a hexadecimal value (i.e. 5=5 or 13=D). When asked for the length of the key, say 1.\n"
version_descrip+="Each Caesar cipher will have a randomly-generated key of"
version_descrip+=" 1 to 7 shifts. You will be shown all ten targets in the network but will guess the keys one at a time based on the transformations"
version_descrip+=" of the word \"Welcome.\""
version_descrip+=" Knowing this, you will guess the shifts of the seven targets. After you finish, report your findings through eCampus."

print("Message about this version of the game:\n\t" + version_descrip, end="\n\n")

message="The game you are about to play involves guessing the cipher shifts applied to various targets in a network."
message+=" Attempt to hack into the network by compromising all of the targets. You should know that no key will be longer"
message+="than 7 numbers. Also given is the information that if a key is shorter than the word encoded, then it is repeated."
#print(message)

inp = input("Would you like to play? (y/n)\n")
if inp == "n" or inp == "N" or inp == "no" or inp == "No" or inp == "NO":
    exit(0)

if inp == "Nah" or inp == "nah":
    print("Sorry, "+inp+" does not count. Time to play!")

print("\n")

#First level
print("")
vn = Virtual_Network(1)
#c.print_targets()

#Start our timer
#t = GameTimer(vn)


def menu(index):
    t.check_time()
    c.print_targets_obscured()
    c.print_targets_coded("Welcome")
    guess= []
    x = 0
    print("Currently trying to crack target "+str(t.on_index)+".")
    while x != -2:
        t.check_time()
        buffer = str(input("\tEnter num or -2 to end: "))
        #Check if buffer was a String
        if buffer.isdecimal():
            x = int(buffer)
        elif buffer[0] == '-':
            x = int(buffer)
        else:
            x = buffer
        if x != -2:
            guess.append(x)
    return c.guess(index, guess)

#This is now handled in the GameTimer constructor
#on_index = 0

while c.all_unsafe() == False:
    if menu(t.on_index):
        while True:
            key_length_guess = int(input("What was the length of that key? (0-7)"))
            if key_length_guess == c.get_targets()[t.on_index].key_length:
                print("Very good!")
                t.on_index += 1
                break
            else:
                print("Wrong length!")
            
    
c.print_targets_obscured_final(" ")
print("Good work, thanks for playing.")

#Write congratulations file
f = open('congrats.txt','w')
f.write('Congratulations student, you have proved yourself an able Penetration Tester. Feel proud of this victory today.')
f.close()


